package com.wtwd.yusan.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wtwd.yusan.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property UserIdStr = new Property(2, String.class, "userIdStr", false, "USER_ID_STR");
        public final static Property Head_img = new Property(3, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Birth = new Property(4, String.class, "birth", false, "BIRTH");
        public final static Property User_name = new Property(5, String.class, "user_name", false, "USER_NAME");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property Height = new Property(8, String.class, "height", false, "HEIGHT");
        public final static Property Nick_name = new Property(9, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Country = new Property(10, String.class, "country", false, "COUNTRY");
        public final static Property Create_time = new Property(11, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Invisible = new Property(12, int.class, "invisible", false, "INVISIBLE");
        public final static Property Open_id = new Property(13, String.class, "open_id", false, "OPEN_ID");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"USER_ID_STR\" TEXT," + // 2: userIdStr
                "\"HEAD_IMG\" TEXT," + // 3: head_img
                "\"BIRTH\" TEXT," + // 4: birth
                "\"USER_NAME\" TEXT," + // 5: user_name
                "\"PASSWORD\" TEXT," + // 6: password
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"HEIGHT\" TEXT," + // 8: height
                "\"NICK_NAME\" TEXT," + // 9: nick_name
                "\"COUNTRY\" TEXT," + // 10: country
                "\"CREATE_TIME\" TEXT," + // 11: create_time
                "\"INVISIBLE\" INTEGER NOT NULL ," + // 12: invisible
                "\"OPEN_ID\" TEXT);"); // 13: open_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String userIdStr = entity.getUserIdStr();
        if (userIdStr != null) {
            stmt.bindString(3, userIdStr);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(4, head_img);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(5, birth);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(6, user_name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
        stmt.bindLong(8, entity.getSex());
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(9, height);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(10, nick_name);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(11, country);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(12, create_time);
        }
        stmt.bindLong(13, entity.getInvisible());
 
        String open_id = entity.getOpen_id();
        if (open_id != null) {
            stmt.bindString(14, open_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String userIdStr = entity.getUserIdStr();
        if (userIdStr != null) {
            stmt.bindString(3, userIdStr);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(4, head_img);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(5, birth);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(6, user_name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
        stmt.bindLong(8, entity.getSex());
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(9, height);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(10, nick_name);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(11, country);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(12, create_time);
        }
        stmt.bindLong(13, entity.getInvisible());
 
        String open_id = entity.getOpen_id();
        if (open_id != null) {
            stmt.bindString(14, open_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userIdStr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // head_img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birth
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // height
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nick_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // country
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // create_time
            cursor.getInt(offset + 12), // invisible
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // open_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserIdStr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHead_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setHeight(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNick_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCountry(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreate_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInvisible(cursor.getInt(offset + 12));
        entity.setOpen_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
